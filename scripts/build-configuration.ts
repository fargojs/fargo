import fs from 'node:fs';
import * as ts from 'typescript';

const command = 'pnpm run update:build-configuration';

const BANNER = `/*
* This file is automatically generated.
* Run '${command}' to update.
*/`;

async function run() {
  const sourceFile = ts.createSourceFile(
    'test.ts',
    fs.readFileSync('./packages/types/src/types.ts').toString(),
    ts.ScriptTarget.ESNext,
    true
  );
  delintNode(sourceFile);

  function delintNode(node: ts.Node) {
    switch (node.kind) {
      case ts.SyntaxKind.JSDocTag:
        console.log('JSDoc');
        break;
      case ts.SyntaxKind.TypeKeyword:
        console.log('TypeKeyword');
        break;
      case ts.SyntaxKind.StringKeyword:
        console.log('StringKeyword');
        // console.log((node as ts.StringLiteral).getText());

        break;
      case ts.SyntaxKind.UnionType:
        console.log('UnionType');
        // console.log((node as ts.UnionTypeNode).getText());

        break;
      case ts.SyntaxKind.InterfaceKeyword:
        console.log('InterfaceKeyword');
        break;

      case ts.SyntaxKind.IfStatement:
        console.log('if statement');
        break;

      case ts.SyntaxKind.BinaryExpression:
        console.log('binary expression');
        break;
    }

    ts.forEachChild(node, delintNode);
  }
}

run();
